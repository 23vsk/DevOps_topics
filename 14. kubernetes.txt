## What is kubernetes?
> - Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications.
> - (often abbreviated as K8s - The abbreviation K8s comes from: Kubernetes has 10 characters between the first letter K and the last letter s.)

> **Node**: In Kubernetes, a node is a worker machine in the cluster where workloads (i.e., Pods) are deployed and executed.

> **Container**is a lightweight, portable, and self-sufficient unit that packages an application and its dependencies, allowing it to run consistently across different environments

> **POD**: A Pod is the smallest and most basic deployable unit in Kubernetes. It represents a single instance of a running process in the cluster and serves as a wrapper for one or more containers.

> **Cluster**: A Kubernetes cluster is a collection of machines (nodes) that work together to run, manage, and scale containerized applications.

##Reference
https://github.com/iam-veeramalla/Kubernetes-Zero-to-Hero/blob/main/README.md
##K8s installation
https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

##Install Minikube
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
minikube start

#Installing Kubectl
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
kubectl version --client
kubectl version --client --output=yaml


##pod.yml [Equivalent to docker run -d nginx:1.14.2 --name nginx -p 80:80

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

##Commands
kubectl get nodes
kubectl create -f pod.yml ##To create pod
kubectl apply -f pod.yml ##To create or restart pod
kubectl get pods ##Displays the pods
kubectl get pods -o wide ##Displays all details of pods
kubectl get ing ##Displays the details of Ingress
kubectl exec -it podname -- /bin/bash ##Used to login to pod
kubectl logs podname ##Displays logs
kubectl describe pod poadname ##Displays all the information of the pod
kubectl delete deploy name ##Used to delete deployment/Pods
kubectl get all -a ##Displays all the applications in cluster
minikube ssh ##Used to login to cluster in minikube
ssh -i identityname podname ##Used to login to cluster in kubernetes
curl ipaddress ##To access the application

kubectl get svc -v=9 ##Displays all the traffic of pod
kubectl edit svc servicename ##To edit the service
kubectl expose deployment myapp --type=LoadBalancer --port=80 --target-port=8080  
##used to create a Kubernetes Service that exposes a pod, deployment, replica set, or other resources to network access 
â€” either internally inside the cluster or externally outside the cluster.

kubectl create secret generic test-secret --from-literal=db-port="3306" ##Used to create secret

##To create fargateprofile
eksctl create fargateprofile --cluster demo-cluster --region ap-south-1 --name alb-sample-app --namespace game-2048

##To create IAM policy
aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json

##To create IAM Service account
eksctl create iamserviceaccount --cluster=demo-cluster --namespace=kube-system --name=aws-load-balancer-controller --role-name azonEKSLoadBalancerControllerRole --attach-policy-arn=arn:aws:iam::783764587189:policy/AWSLoadBalancerControllerIAMPolicy --approve

##To install load-balancer
helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=demo-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=ap-south-1 --set vpcId=vpc-08be9862a64b67a23

kubectl edit deploy

## deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - name: nginx
        image: nginx:latest  # Define the image to use for the deployment
        ports:
        - containerPort: 80

## ingress.yml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: webapp.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-app-service
            port:
              number: 80

## service.yml
## ClusterIP: Default service type for internal communication

apiVersion: v1
kind: Service
metadata:
  name: web-app-service
spec:
  selector:
    app: web-app  # This matches the Pods managed by the deployment
  ports:
    - protocol: TCP
      port: 80        # Port to expose externally
      targetPort: 80  # The port on the container
  type: ClusterIP     # Default service type for internal communication

##Nodeport
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30007

##Load Balancer
apiVersion: v1
kind: Service
metadata:
  name: web-app-loadbalancer
spec:
  selector:
    app: web-app  # This selector matches the Pods managed by the deployment
  ports:
    - protocol: TCP
      port: 80        # The external port exposed by the LoadBalancer
      targetPort: 80  # The internal port the service forwards traffic to in the Pods
  type: LoadBalancer  # This makes the service accessible externally via a cloud load balancer